// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: share.pro

#ifndef PROTOBUF_share_2epro__INCLUDED
#define PROTOBUF_share_2epro__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sharebase {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_share_2epro();
void protobuf_AssignDesc_share_2epro();
void protobuf_ShutdownFile_share_2epro();

class BitcoinMsg;
class EthMsg;
class SiaMsg;
class DecredMsg;
class BytomMsg;

// ===================================================================

class BitcoinMsg : public ::google::protobuf::Message {
 public:
  BitcoinMsg();
  virtual ~BitcoinMsg();

  BitcoinMsg(const BitcoinMsg& from);

  inline BitcoinMsg& operator=(const BitcoinMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitcoinMsg& default_instance();

  void Swap(BitcoinMsg* other);

  // implements Message ----------------------------------------------

  BitcoinMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitcoinMsg& from);
  void MergeFrom(const BitcoinMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional sint64 workerhashid = 2;
  inline bool has_workerhashid() const;
  inline void clear_workerhashid();
  static const int kWorkerhashidFieldNumber = 2;
  inline ::google::protobuf::int64 workerhashid() const;
  inline void set_workerhashid(::google::protobuf::int64 value);

  // optional sint32 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional sint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional sint64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint64 jobid = 7;
  inline bool has_jobid() const;
  inline void clear_jobid();
  static const int kJobidFieldNumber = 7;
  inline ::google::protobuf::uint64 jobid() const;
  inline void set_jobid(::google::protobuf::uint64 value);

  // optional uint64 sharediff = 8;
  inline bool has_sharediff() const;
  inline void clear_sharediff();
  static const int kSharediffFieldNumber = 8;
  inline ::google::protobuf::uint64 sharediff() const;
  inline void set_sharediff(::google::protobuf::uint64 value);

  // optional uint32 blkbits = 9;
  inline bool has_blkbits() const;
  inline void clear_blkbits();
  static const int kBlkbitsFieldNumber = 9;
  inline ::google::protobuf::uint32 blkbits() const;
  inline void set_blkbits(::google::protobuf::uint32 value);

  // optional uint32 height = 10;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 10;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional uint32 nonce = 11;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 11;
  inline ::google::protobuf::uint32 nonce() const;
  inline void set_nonce(::google::protobuf::uint32 value);

  // optional uint32 sessionid = 12;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 12;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // optional uint32 versionMask = 13;
  inline bool has_versionmask() const;
  inline void clear_versionmask();
  static const int kVersionMaskFieldNumber = 13;
  inline ::google::protobuf::uint32 versionmask() const;
  inline void set_versionmask(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sharebase.BitcoinMsg)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_workerhashid();
  inline void clear_has_workerhashid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_jobid();
  inline void clear_has_jobid();
  inline void set_has_sharediff();
  inline void clear_has_sharediff();
  inline void set_has_blkbits();
  inline void clear_has_blkbits();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_versionmask();
  inline void clear_has_versionmask();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 workerhashid_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* ip_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::uint32 blkbits_;
  ::google::protobuf::uint64 jobid_;
  ::google::protobuf::uint64 sharediff_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 nonce_;
  ::google::protobuf::uint32 sessionid_;
  ::google::protobuf::uint32 versionmask_;
  friend void  protobuf_AddDesc_share_2epro();
  friend void protobuf_AssignDesc_share_2epro();
  friend void protobuf_ShutdownFile_share_2epro();

  void InitAsDefaultInstance();
  static BitcoinMsg* default_instance_;
};
// -------------------------------------------------------------------

class EthMsg : public ::google::protobuf::Message {
 public:
  EthMsg();
  virtual ~EthMsg();

  EthMsg(const EthMsg& from);

  inline EthMsg& operator=(const EthMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EthMsg& default_instance();

  void Swap(EthMsg* other);

  // implements Message ----------------------------------------------

  EthMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EthMsg& from);
  void MergeFrom(const EthMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional sint64 workerhashid = 2;
  inline bool has_workerhashid() const;
  inline void clear_workerhashid();
  static const int kWorkerhashidFieldNumber = 2;
  inline ::google::protobuf::int64 workerhashid() const;
  inline void set_workerhashid(::google::protobuf::int64 value);

  // optional sint32 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional sint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional sint64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint64 headerhash = 7;
  inline bool has_headerhash() const;
  inline void clear_headerhash();
  static const int kHeaderhashFieldNumber = 7;
  inline ::google::protobuf::uint64 headerhash() const;
  inline void set_headerhash(::google::protobuf::uint64 value);

  // optional uint64 sharediff = 8;
  inline bool has_sharediff() const;
  inline void clear_sharediff();
  static const int kSharediffFieldNumber = 8;
  inline ::google::protobuf::uint64 sharediff() const;
  inline void set_sharediff(::google::protobuf::uint64 value);

  // optional uint64 networkdiff = 9;
  inline bool has_networkdiff() const;
  inline void clear_networkdiff();
  static const int kNetworkdiffFieldNumber = 9;
  inline ::google::protobuf::uint64 networkdiff() const;
  inline void set_networkdiff(::google::protobuf::uint64 value);

  // optional uint32 height = 10;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 10;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional uint64 nonce = 11;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 11;
  inline ::google::protobuf::uint64 nonce() const;
  inline void set_nonce(::google::protobuf::uint64 value);

  // optional uint32 sessionid = 12;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 12;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sharebase.EthMsg)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_workerhashid();
  inline void clear_has_workerhashid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_headerhash();
  inline void clear_has_headerhash();
  inline void set_has_sharediff();
  inline void clear_has_sharediff();
  inline void set_has_networkdiff();
  inline void clear_has_networkdiff();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 workerhashid_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* ip_;
  ::google::protobuf::uint64 headerhash_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint64 sharediff_;
  ::google::protobuf::uint64 networkdiff_;
  ::google::protobuf::uint64 nonce_;
  ::google::protobuf::uint32 sessionid_;
  friend void  protobuf_AddDesc_share_2epro();
  friend void protobuf_AssignDesc_share_2epro();
  friend void protobuf_ShutdownFile_share_2epro();

  void InitAsDefaultInstance();
  static EthMsg* default_instance_;
};
// -------------------------------------------------------------------

class SiaMsg : public ::google::protobuf::Message {
 public:
  SiaMsg();
  virtual ~SiaMsg();

  SiaMsg(const SiaMsg& from);

  inline SiaMsg& operator=(const SiaMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiaMsg& default_instance();

  void Swap(SiaMsg* other);

  // implements Message ----------------------------------------------

  SiaMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SiaMsg& from);
  void MergeFrom(const SiaMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional sint64 workerhashid = 2;
  inline bool has_workerhashid() const;
  inline void clear_workerhashid();
  static const int kWorkerhashidFieldNumber = 2;
  inline ::google::protobuf::int64 workerhashid() const;
  inline void set_workerhashid(::google::protobuf::int64 value);

  // optional sint32 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional sint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional sint64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint64 jobid = 7;
  inline bool has_jobid() const;
  inline void clear_jobid();
  static const int kJobidFieldNumber = 7;
  inline ::google::protobuf::uint64 jobid() const;
  inline void set_jobid(::google::protobuf::uint64 value);

  // optional uint64 sharediff = 8;
  inline bool has_sharediff() const;
  inline void clear_sharediff();
  static const int kSharediffFieldNumber = 8;
  inline ::google::protobuf::uint64 sharediff() const;
  inline void set_sharediff(::google::protobuf::uint64 value);

  // optional uint32 blkbits = 9;
  inline bool has_blkbits() const;
  inline void clear_blkbits();
  static const int kBlkbitsFieldNumber = 9;
  inline ::google::protobuf::uint32 blkbits() const;
  inline void set_blkbits(::google::protobuf::uint32 value);

  // optional uint32 height = 10;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 10;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional uint32 nonce = 11;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 11;
  inline ::google::protobuf::uint32 nonce() const;
  inline void set_nonce(::google::protobuf::uint32 value);

  // optional uint32 sessionid = 12;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 12;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sharebase.SiaMsg)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_workerhashid();
  inline void clear_has_workerhashid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_jobid();
  inline void clear_has_jobid();
  inline void set_has_sharediff();
  inline void clear_has_sharediff();
  inline void set_has_blkbits();
  inline void clear_has_blkbits();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 workerhashid_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* ip_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::uint32 blkbits_;
  ::google::protobuf::uint64 jobid_;
  ::google::protobuf::uint64 sharediff_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 nonce_;
  ::google::protobuf::uint32 sessionid_;
  friend void  protobuf_AddDesc_share_2epro();
  friend void protobuf_AssignDesc_share_2epro();
  friend void protobuf_ShutdownFile_share_2epro();

  void InitAsDefaultInstance();
  static SiaMsg* default_instance_;
};
// -------------------------------------------------------------------

class DecredMsg : public ::google::protobuf::Message {
 public:
  DecredMsg();
  virtual ~DecredMsg();

  DecredMsg(const DecredMsg& from);

  inline DecredMsg& operator=(const DecredMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecredMsg& default_instance();

  void Swap(DecredMsg* other);

  // implements Message ----------------------------------------------

  DecredMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DecredMsg& from);
  void MergeFrom(const DecredMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional sint64 workerhashid = 2;
  inline bool has_workerhashid() const;
  inline void clear_workerhashid();
  static const int kWorkerhashidFieldNumber = 2;
  inline ::google::protobuf::int64 workerhashid() const;
  inline void set_workerhashid(::google::protobuf::int64 value);

  // optional sint32 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional sint32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional sint64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint64 jobid = 7;
  inline bool has_jobid() const;
  inline void clear_jobid();
  static const int kJobidFieldNumber = 7;
  inline ::google::protobuf::uint64 jobid() const;
  inline void set_jobid(::google::protobuf::uint64 value);

  // optional uint64 sharediff = 8;
  inline bool has_sharediff() const;
  inline void clear_sharediff();
  static const int kSharediffFieldNumber = 8;
  inline ::google::protobuf::uint64 sharediff() const;
  inline void set_sharediff(::google::protobuf::uint64 value);

  // optional uint32 blkbits = 9;
  inline bool has_blkbits() const;
  inline void clear_blkbits();
  static const int kBlkbitsFieldNumber = 9;
  inline ::google::protobuf::uint32 blkbits() const;
  inline void set_blkbits(::google::protobuf::uint32 value);

  // optional uint32 height = 10;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 10;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional uint32 nonce = 11;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 11;
  inline ::google::protobuf::uint32 nonce() const;
  inline void set_nonce(::google::protobuf::uint32 value);

  // optional uint32 sessionid = 12;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 12;
  inline ::google::protobuf::uint32 sessionid() const;
  inline void set_sessionid(::google::protobuf::uint32 value);

  // optional uint32 network = 13;
  inline bool has_network() const;
  inline void clear_network();
  static const int kNetworkFieldNumber = 13;
  inline ::google::protobuf::uint32 network() const;
  inline void set_network(::google::protobuf::uint32 value);

  // optional uint32 voters = 14;
  inline bool has_voters() const;
  inline void clear_voters();
  static const int kVotersFieldNumber = 14;
  inline ::google::protobuf::uint32 voters() const;
  inline void set_voters(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:sharebase.DecredMsg)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_workerhashid();
  inline void clear_has_workerhashid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_jobid();
  inline void clear_has_jobid();
  inline void set_has_sharediff();
  inline void clear_has_sharediff();
  inline void set_has_blkbits();
  inline void clear_has_blkbits();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_network();
  inline void clear_has_network();
  inline void set_has_voters();
  inline void clear_has_voters();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 workerhashid_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* ip_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::uint32 blkbits_;
  ::google::protobuf::uint64 jobid_;
  ::google::protobuf::uint64 sharediff_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 nonce_;
  ::google::protobuf::uint32 sessionid_;
  ::google::protobuf::uint32 network_;
  ::google::protobuf::uint32 voters_;
  friend void  protobuf_AddDesc_share_2epro();
  friend void protobuf_AssignDesc_share_2epro();
  friend void protobuf_ShutdownFile_share_2epro();

  void InitAsDefaultInstance();
  static DecredMsg* default_instance_;
};
// -------------------------------------------------------------------

class BytomMsg : public ::google::protobuf::Message {
 public:
  BytomMsg();
  virtual ~BytomMsg();

  BytomMsg(const BytomMsg& from);

  inline BytomMsg& operator=(const BytomMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BytomMsg& default_instance();

  void Swap(BytomMsg* other);

  // implements Message ----------------------------------------------

  BytomMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BytomMsg& from);
  void MergeFrom(const BytomMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint64 jobid = 2;
  inline bool has_jobid() const;
  inline void clear_jobid();
  static const int kJobidFieldNumber = 2;
  inline ::google::protobuf::uint64 jobid() const;
  inline void set_jobid(::google::protobuf::uint64 value);

  // optional sint64 workerhashid = 3;
  inline bool has_workerhashid() const;
  inline void clear_workerhashid();
  static const int kWorkerhashidFieldNumber = 3;
  inline ::google::protobuf::int64 workerhashid() const;
  inline void set_workerhashid(::google::protobuf::int64 value);

  // optional sint64 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional uint64 sharediff = 5;
  inline bool has_sharediff() const;
  inline void clear_sharediff();
  static const int kSharediffFieldNumber = 5;
  inline ::google::protobuf::uint64 sharediff() const;
  inline void set_sharediff(::google::protobuf::uint64 value);

  // optional uint64 blkbits = 6;
  inline bool has_blkbits() const;
  inline void clear_blkbits();
  static const int kBlkbitsFieldNumber = 6;
  inline ::google::protobuf::uint64 blkbits() const;
  inline void set_blkbits(::google::protobuf::uint64 value);

  // optional uint64 height = 7;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 7;
  inline ::google::protobuf::uint64 height() const;
  inline void set_height(::google::protobuf::uint64 value);

  // optional string ip = 8;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 8;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional bytes combinedHeader = 9;
  inline bool has_combinedheader() const;
  inline void clear_combinedheader();
  static const int kCombinedHeaderFieldNumber = 9;
  inline const ::std::string& combinedheader() const;
  inline void set_combinedheader(const ::std::string& value);
  inline void set_combinedheader(const char* value);
  inline void set_combinedheader(const void* value, size_t size);
  inline ::std::string* mutable_combinedheader();
  inline ::std::string* release_combinedheader();
  inline void set_allocated_combinedheader(::std::string* combinedheader);

  // optional sint32 userid = 10;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 10;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional sint32 status = 11;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 11;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sharebase.BytomMsg)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_jobid();
  inline void clear_has_jobid();
  inline void set_has_workerhashid();
  inline void clear_has_workerhashid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_sharediff();
  inline void clear_has_sharediff();
  inline void set_has_blkbits();
  inline void clear_has_blkbits();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_combinedheader();
  inline void clear_has_combinedheader();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 jobid_;
  ::google::protobuf::int64 workerhashid_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::uint64 sharediff_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::uint64 blkbits_;
  ::google::protobuf::uint64 height_;
  ::std::string* ip_;
  ::std::string* combinedheader_;
  ::google::protobuf::int32 status_;
  friend void  protobuf_AddDesc_share_2epro();
  friend void protobuf_AssignDesc_share_2epro();
  friend void protobuf_ShutdownFile_share_2epro();

  void InitAsDefaultInstance();
  static BytomMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// BitcoinMsg

// required sint32 version = 1;
inline bool BitcoinMsg::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitcoinMsg::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitcoinMsg::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitcoinMsg::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 BitcoinMsg::version() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.version)
  return version_;
}
inline void BitcoinMsg::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.version)
}

// optional sint64 workerhashid = 2;
inline bool BitcoinMsg::has_workerhashid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitcoinMsg::set_has_workerhashid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitcoinMsg::clear_has_workerhashid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitcoinMsg::clear_workerhashid() {
  workerhashid_ = GOOGLE_LONGLONG(0);
  clear_has_workerhashid();
}
inline ::google::protobuf::int64 BitcoinMsg::workerhashid() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.workerhashid)
  return workerhashid_;
}
inline void BitcoinMsg::set_workerhashid(::google::protobuf::int64 value) {
  set_has_workerhashid();
  workerhashid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.workerhashid)
}

// optional sint32 userid = 3;
inline bool BitcoinMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BitcoinMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BitcoinMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BitcoinMsg::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 BitcoinMsg::userid() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.userid)
  return userid_;
}
inline void BitcoinMsg::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.userid)
}

// optional sint32 status = 4;
inline bool BitcoinMsg::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BitcoinMsg::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BitcoinMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BitcoinMsg::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 BitcoinMsg::status() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.status)
  return status_;
}
inline void BitcoinMsg::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.status)
}

// optional sint64 timestamp = 5;
inline bool BitcoinMsg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BitcoinMsg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BitcoinMsg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BitcoinMsg::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 BitcoinMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.timestamp)
  return timestamp_;
}
inline void BitcoinMsg::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.timestamp)
}

// optional string ip = 6;
inline bool BitcoinMsg::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BitcoinMsg::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BitcoinMsg::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BitcoinMsg::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BitcoinMsg::ip() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.ip)
  return *ip_;
}
inline void BitcoinMsg::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.ip)
}
inline void BitcoinMsg::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:sharebase.BitcoinMsg.ip)
}
inline void BitcoinMsg::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sharebase.BitcoinMsg.ip)
}
inline ::std::string* BitcoinMsg::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sharebase.BitcoinMsg.ip)
  return ip_;
}
inline ::std::string* BitcoinMsg::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BitcoinMsg::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sharebase.BitcoinMsg.ip)
}

// optional uint64 jobid = 7;
inline bool BitcoinMsg::has_jobid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BitcoinMsg::set_has_jobid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BitcoinMsg::clear_has_jobid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BitcoinMsg::clear_jobid() {
  jobid_ = GOOGLE_ULONGLONG(0);
  clear_has_jobid();
}
inline ::google::protobuf::uint64 BitcoinMsg::jobid() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.jobid)
  return jobid_;
}
inline void BitcoinMsg::set_jobid(::google::protobuf::uint64 value) {
  set_has_jobid();
  jobid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.jobid)
}

// optional uint64 sharediff = 8;
inline bool BitcoinMsg::has_sharediff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BitcoinMsg::set_has_sharediff() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BitcoinMsg::clear_has_sharediff() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BitcoinMsg::clear_sharediff() {
  sharediff_ = GOOGLE_ULONGLONG(0);
  clear_has_sharediff();
}
inline ::google::protobuf::uint64 BitcoinMsg::sharediff() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.sharediff)
  return sharediff_;
}
inline void BitcoinMsg::set_sharediff(::google::protobuf::uint64 value) {
  set_has_sharediff();
  sharediff_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.sharediff)
}

// optional uint32 blkbits = 9;
inline bool BitcoinMsg::has_blkbits() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BitcoinMsg::set_has_blkbits() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BitcoinMsg::clear_has_blkbits() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BitcoinMsg::clear_blkbits() {
  blkbits_ = 0u;
  clear_has_blkbits();
}
inline ::google::protobuf::uint32 BitcoinMsg::blkbits() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.blkbits)
  return blkbits_;
}
inline void BitcoinMsg::set_blkbits(::google::protobuf::uint32 value) {
  set_has_blkbits();
  blkbits_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.blkbits)
}

// optional uint32 height = 10;
inline bool BitcoinMsg::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BitcoinMsg::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BitcoinMsg::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BitcoinMsg::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 BitcoinMsg::height() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.height)
  return height_;
}
inline void BitcoinMsg::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.height)
}

// optional uint32 nonce = 11;
inline bool BitcoinMsg::has_nonce() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BitcoinMsg::set_has_nonce() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BitcoinMsg::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BitcoinMsg::clear_nonce() {
  nonce_ = 0u;
  clear_has_nonce();
}
inline ::google::protobuf::uint32 BitcoinMsg::nonce() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.nonce)
  return nonce_;
}
inline void BitcoinMsg::set_nonce(::google::protobuf::uint32 value) {
  set_has_nonce();
  nonce_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.nonce)
}

// optional uint32 sessionid = 12;
inline bool BitcoinMsg::has_sessionid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BitcoinMsg::set_has_sessionid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BitcoinMsg::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BitcoinMsg::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 BitcoinMsg::sessionid() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.sessionid)
  return sessionid_;
}
inline void BitcoinMsg::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.sessionid)
}

// optional uint32 versionMask = 13;
inline bool BitcoinMsg::has_versionmask() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BitcoinMsg::set_has_versionmask() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BitcoinMsg::clear_has_versionmask() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BitcoinMsg::clear_versionmask() {
  versionmask_ = 0u;
  clear_has_versionmask();
}
inline ::google::protobuf::uint32 BitcoinMsg::versionmask() const {
  // @@protoc_insertion_point(field_get:sharebase.BitcoinMsg.versionMask)
  return versionmask_;
}
inline void BitcoinMsg::set_versionmask(::google::protobuf::uint32 value) {
  set_has_versionmask();
  versionmask_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BitcoinMsg.versionMask)
}

// -------------------------------------------------------------------

// EthMsg

// required sint32 version = 1;
inline bool EthMsg::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EthMsg::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EthMsg::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EthMsg::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 EthMsg::version() const {
  // @@protoc_insertion_point(field_get:sharebase.EthMsg.version)
  return version_;
}
inline void EthMsg::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:sharebase.EthMsg.version)
}

// optional sint64 workerhashid = 2;
inline bool EthMsg::has_workerhashid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EthMsg::set_has_workerhashid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EthMsg::clear_has_workerhashid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EthMsg::clear_workerhashid() {
  workerhashid_ = GOOGLE_LONGLONG(0);
  clear_has_workerhashid();
}
inline ::google::protobuf::int64 EthMsg::workerhashid() const {
  // @@protoc_insertion_point(field_get:sharebase.EthMsg.workerhashid)
  return workerhashid_;
}
inline void EthMsg::set_workerhashid(::google::protobuf::int64 value) {
  set_has_workerhashid();
  workerhashid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.EthMsg.workerhashid)
}

// optional sint32 userid = 3;
inline bool EthMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EthMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EthMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EthMsg::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 EthMsg::userid() const {
  // @@protoc_insertion_point(field_get:sharebase.EthMsg.userid)
  return userid_;
}
inline void EthMsg::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.EthMsg.userid)
}

// optional sint32 status = 4;
inline bool EthMsg::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EthMsg::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EthMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EthMsg::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 EthMsg::status() const {
  // @@protoc_insertion_point(field_get:sharebase.EthMsg.status)
  return status_;
}
inline void EthMsg::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sharebase.EthMsg.status)
}

// optional sint64 timestamp = 5;
inline bool EthMsg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EthMsg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EthMsg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EthMsg::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 EthMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:sharebase.EthMsg.timestamp)
  return timestamp_;
}
inline void EthMsg::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sharebase.EthMsg.timestamp)
}

// optional string ip = 6;
inline bool EthMsg::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EthMsg::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EthMsg::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EthMsg::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& EthMsg::ip() const {
  // @@protoc_insertion_point(field_get:sharebase.EthMsg.ip)
  return *ip_;
}
inline void EthMsg::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:sharebase.EthMsg.ip)
}
inline void EthMsg::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:sharebase.EthMsg.ip)
}
inline void EthMsg::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sharebase.EthMsg.ip)
}
inline ::std::string* EthMsg::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sharebase.EthMsg.ip)
  return ip_;
}
inline ::std::string* EthMsg::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EthMsg::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sharebase.EthMsg.ip)
}

// optional uint64 headerhash = 7;
inline bool EthMsg::has_headerhash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EthMsg::set_has_headerhash() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EthMsg::clear_has_headerhash() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EthMsg::clear_headerhash() {
  headerhash_ = GOOGLE_ULONGLONG(0);
  clear_has_headerhash();
}
inline ::google::protobuf::uint64 EthMsg::headerhash() const {
  // @@protoc_insertion_point(field_get:sharebase.EthMsg.headerhash)
  return headerhash_;
}
inline void EthMsg::set_headerhash(::google::protobuf::uint64 value) {
  set_has_headerhash();
  headerhash_ = value;
  // @@protoc_insertion_point(field_set:sharebase.EthMsg.headerhash)
}

// optional uint64 sharediff = 8;
inline bool EthMsg::has_sharediff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EthMsg::set_has_sharediff() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EthMsg::clear_has_sharediff() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EthMsg::clear_sharediff() {
  sharediff_ = GOOGLE_ULONGLONG(0);
  clear_has_sharediff();
}
inline ::google::protobuf::uint64 EthMsg::sharediff() const {
  // @@protoc_insertion_point(field_get:sharebase.EthMsg.sharediff)
  return sharediff_;
}
inline void EthMsg::set_sharediff(::google::protobuf::uint64 value) {
  set_has_sharediff();
  sharediff_ = value;
  // @@protoc_insertion_point(field_set:sharebase.EthMsg.sharediff)
}

// optional uint64 networkdiff = 9;
inline bool EthMsg::has_networkdiff() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EthMsg::set_has_networkdiff() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EthMsg::clear_has_networkdiff() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EthMsg::clear_networkdiff() {
  networkdiff_ = GOOGLE_ULONGLONG(0);
  clear_has_networkdiff();
}
inline ::google::protobuf::uint64 EthMsg::networkdiff() const {
  // @@protoc_insertion_point(field_get:sharebase.EthMsg.networkdiff)
  return networkdiff_;
}
inline void EthMsg::set_networkdiff(::google::protobuf::uint64 value) {
  set_has_networkdiff();
  networkdiff_ = value;
  // @@protoc_insertion_point(field_set:sharebase.EthMsg.networkdiff)
}

// optional uint32 height = 10;
inline bool EthMsg::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EthMsg::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EthMsg::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EthMsg::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 EthMsg::height() const {
  // @@protoc_insertion_point(field_get:sharebase.EthMsg.height)
  return height_;
}
inline void EthMsg::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:sharebase.EthMsg.height)
}

// optional uint64 nonce = 11;
inline bool EthMsg::has_nonce() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EthMsg::set_has_nonce() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EthMsg::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EthMsg::clear_nonce() {
  nonce_ = GOOGLE_ULONGLONG(0);
  clear_has_nonce();
}
inline ::google::protobuf::uint64 EthMsg::nonce() const {
  // @@protoc_insertion_point(field_get:sharebase.EthMsg.nonce)
  return nonce_;
}
inline void EthMsg::set_nonce(::google::protobuf::uint64 value) {
  set_has_nonce();
  nonce_ = value;
  // @@protoc_insertion_point(field_set:sharebase.EthMsg.nonce)
}

// optional uint32 sessionid = 12;
inline bool EthMsg::has_sessionid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EthMsg::set_has_sessionid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EthMsg::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EthMsg::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 EthMsg::sessionid() const {
  // @@protoc_insertion_point(field_get:sharebase.EthMsg.sessionid)
  return sessionid_;
}
inline void EthMsg::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.EthMsg.sessionid)
}

// -------------------------------------------------------------------

// SiaMsg

// required uint32 version = 1;
inline bool SiaMsg::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiaMsg::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiaMsg::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiaMsg::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 SiaMsg::version() const {
  // @@protoc_insertion_point(field_get:sharebase.SiaMsg.version)
  return version_;
}
inline void SiaMsg::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:sharebase.SiaMsg.version)
}

// optional sint64 workerhashid = 2;
inline bool SiaMsg::has_workerhashid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiaMsg::set_has_workerhashid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiaMsg::clear_has_workerhashid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiaMsg::clear_workerhashid() {
  workerhashid_ = GOOGLE_LONGLONG(0);
  clear_has_workerhashid();
}
inline ::google::protobuf::int64 SiaMsg::workerhashid() const {
  // @@protoc_insertion_point(field_get:sharebase.SiaMsg.workerhashid)
  return workerhashid_;
}
inline void SiaMsg::set_workerhashid(::google::protobuf::int64 value) {
  set_has_workerhashid();
  workerhashid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.SiaMsg.workerhashid)
}

// optional sint32 userid = 3;
inline bool SiaMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SiaMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SiaMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SiaMsg::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 SiaMsg::userid() const {
  // @@protoc_insertion_point(field_get:sharebase.SiaMsg.userid)
  return userid_;
}
inline void SiaMsg::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.SiaMsg.userid)
}

// optional sint32 status = 4;
inline bool SiaMsg::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SiaMsg::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SiaMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SiaMsg::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 SiaMsg::status() const {
  // @@protoc_insertion_point(field_get:sharebase.SiaMsg.status)
  return status_;
}
inline void SiaMsg::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sharebase.SiaMsg.status)
}

// optional sint64 timestamp = 5;
inline bool SiaMsg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SiaMsg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SiaMsg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SiaMsg::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 SiaMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:sharebase.SiaMsg.timestamp)
  return timestamp_;
}
inline void SiaMsg::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sharebase.SiaMsg.timestamp)
}

// optional string ip = 6;
inline bool SiaMsg::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SiaMsg::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SiaMsg::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SiaMsg::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SiaMsg::ip() const {
  // @@protoc_insertion_point(field_get:sharebase.SiaMsg.ip)
  return *ip_;
}
inline void SiaMsg::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:sharebase.SiaMsg.ip)
}
inline void SiaMsg::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:sharebase.SiaMsg.ip)
}
inline void SiaMsg::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sharebase.SiaMsg.ip)
}
inline ::std::string* SiaMsg::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sharebase.SiaMsg.ip)
  return ip_;
}
inline ::std::string* SiaMsg::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SiaMsg::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sharebase.SiaMsg.ip)
}

// optional uint64 jobid = 7;
inline bool SiaMsg::has_jobid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SiaMsg::set_has_jobid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SiaMsg::clear_has_jobid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SiaMsg::clear_jobid() {
  jobid_ = GOOGLE_ULONGLONG(0);
  clear_has_jobid();
}
inline ::google::protobuf::uint64 SiaMsg::jobid() const {
  // @@protoc_insertion_point(field_get:sharebase.SiaMsg.jobid)
  return jobid_;
}
inline void SiaMsg::set_jobid(::google::protobuf::uint64 value) {
  set_has_jobid();
  jobid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.SiaMsg.jobid)
}

// optional uint64 sharediff = 8;
inline bool SiaMsg::has_sharediff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SiaMsg::set_has_sharediff() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SiaMsg::clear_has_sharediff() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SiaMsg::clear_sharediff() {
  sharediff_ = GOOGLE_ULONGLONG(0);
  clear_has_sharediff();
}
inline ::google::protobuf::uint64 SiaMsg::sharediff() const {
  // @@protoc_insertion_point(field_get:sharebase.SiaMsg.sharediff)
  return sharediff_;
}
inline void SiaMsg::set_sharediff(::google::protobuf::uint64 value) {
  set_has_sharediff();
  sharediff_ = value;
  // @@protoc_insertion_point(field_set:sharebase.SiaMsg.sharediff)
}

// optional uint32 blkbits = 9;
inline bool SiaMsg::has_blkbits() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SiaMsg::set_has_blkbits() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SiaMsg::clear_has_blkbits() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SiaMsg::clear_blkbits() {
  blkbits_ = 0u;
  clear_has_blkbits();
}
inline ::google::protobuf::uint32 SiaMsg::blkbits() const {
  // @@protoc_insertion_point(field_get:sharebase.SiaMsg.blkbits)
  return blkbits_;
}
inline void SiaMsg::set_blkbits(::google::protobuf::uint32 value) {
  set_has_blkbits();
  blkbits_ = value;
  // @@protoc_insertion_point(field_set:sharebase.SiaMsg.blkbits)
}

// optional uint32 height = 10;
inline bool SiaMsg::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SiaMsg::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SiaMsg::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SiaMsg::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 SiaMsg::height() const {
  // @@protoc_insertion_point(field_get:sharebase.SiaMsg.height)
  return height_;
}
inline void SiaMsg::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:sharebase.SiaMsg.height)
}

// optional uint32 nonce = 11;
inline bool SiaMsg::has_nonce() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SiaMsg::set_has_nonce() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SiaMsg::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SiaMsg::clear_nonce() {
  nonce_ = 0u;
  clear_has_nonce();
}
inline ::google::protobuf::uint32 SiaMsg::nonce() const {
  // @@protoc_insertion_point(field_get:sharebase.SiaMsg.nonce)
  return nonce_;
}
inline void SiaMsg::set_nonce(::google::protobuf::uint32 value) {
  set_has_nonce();
  nonce_ = value;
  // @@protoc_insertion_point(field_set:sharebase.SiaMsg.nonce)
}

// optional uint32 sessionid = 12;
inline bool SiaMsg::has_sessionid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SiaMsg::set_has_sessionid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SiaMsg::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SiaMsg::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 SiaMsg::sessionid() const {
  // @@protoc_insertion_point(field_get:sharebase.SiaMsg.sessionid)
  return sessionid_;
}
inline void SiaMsg::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.SiaMsg.sessionid)
}

// -------------------------------------------------------------------

// DecredMsg

// required uint32 version = 1;
inline bool DecredMsg::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DecredMsg::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DecredMsg::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DecredMsg::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 DecredMsg::version() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.version)
  return version_;
}
inline void DecredMsg::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.version)
}

// optional sint64 workerhashid = 2;
inline bool DecredMsg::has_workerhashid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DecredMsg::set_has_workerhashid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DecredMsg::clear_has_workerhashid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DecredMsg::clear_workerhashid() {
  workerhashid_ = GOOGLE_LONGLONG(0);
  clear_has_workerhashid();
}
inline ::google::protobuf::int64 DecredMsg::workerhashid() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.workerhashid)
  return workerhashid_;
}
inline void DecredMsg::set_workerhashid(::google::protobuf::int64 value) {
  set_has_workerhashid();
  workerhashid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.workerhashid)
}

// optional sint32 userid = 3;
inline bool DecredMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DecredMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DecredMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DecredMsg::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 DecredMsg::userid() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.userid)
  return userid_;
}
inline void DecredMsg::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.userid)
}

// optional sint32 status = 4;
inline bool DecredMsg::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DecredMsg::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DecredMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DecredMsg::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 DecredMsg::status() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.status)
  return status_;
}
inline void DecredMsg::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.status)
}

// optional sint64 timestamp = 5;
inline bool DecredMsg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DecredMsg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DecredMsg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DecredMsg::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 DecredMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.timestamp)
  return timestamp_;
}
inline void DecredMsg::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.timestamp)
}

// optional string ip = 6;
inline bool DecredMsg::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DecredMsg::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DecredMsg::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DecredMsg::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& DecredMsg::ip() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.ip)
  return *ip_;
}
inline void DecredMsg::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.ip)
}
inline void DecredMsg::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:sharebase.DecredMsg.ip)
}
inline void DecredMsg::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sharebase.DecredMsg.ip)
}
inline ::std::string* DecredMsg::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sharebase.DecredMsg.ip)
  return ip_;
}
inline ::std::string* DecredMsg::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DecredMsg::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sharebase.DecredMsg.ip)
}

// optional uint64 jobid = 7;
inline bool DecredMsg::has_jobid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DecredMsg::set_has_jobid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DecredMsg::clear_has_jobid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DecredMsg::clear_jobid() {
  jobid_ = GOOGLE_ULONGLONG(0);
  clear_has_jobid();
}
inline ::google::protobuf::uint64 DecredMsg::jobid() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.jobid)
  return jobid_;
}
inline void DecredMsg::set_jobid(::google::protobuf::uint64 value) {
  set_has_jobid();
  jobid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.jobid)
}

// optional uint64 sharediff = 8;
inline bool DecredMsg::has_sharediff() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DecredMsg::set_has_sharediff() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DecredMsg::clear_has_sharediff() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DecredMsg::clear_sharediff() {
  sharediff_ = GOOGLE_ULONGLONG(0);
  clear_has_sharediff();
}
inline ::google::protobuf::uint64 DecredMsg::sharediff() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.sharediff)
  return sharediff_;
}
inline void DecredMsg::set_sharediff(::google::protobuf::uint64 value) {
  set_has_sharediff();
  sharediff_ = value;
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.sharediff)
}

// optional uint32 blkbits = 9;
inline bool DecredMsg::has_blkbits() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DecredMsg::set_has_blkbits() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DecredMsg::clear_has_blkbits() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DecredMsg::clear_blkbits() {
  blkbits_ = 0u;
  clear_has_blkbits();
}
inline ::google::protobuf::uint32 DecredMsg::blkbits() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.blkbits)
  return blkbits_;
}
inline void DecredMsg::set_blkbits(::google::protobuf::uint32 value) {
  set_has_blkbits();
  blkbits_ = value;
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.blkbits)
}

// optional uint32 height = 10;
inline bool DecredMsg::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DecredMsg::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DecredMsg::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DecredMsg::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 DecredMsg::height() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.height)
  return height_;
}
inline void DecredMsg::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.height)
}

// optional uint32 nonce = 11;
inline bool DecredMsg::has_nonce() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DecredMsg::set_has_nonce() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DecredMsg::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DecredMsg::clear_nonce() {
  nonce_ = 0u;
  clear_has_nonce();
}
inline ::google::protobuf::uint32 DecredMsg::nonce() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.nonce)
  return nonce_;
}
inline void DecredMsg::set_nonce(::google::protobuf::uint32 value) {
  set_has_nonce();
  nonce_ = value;
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.nonce)
}

// optional uint32 sessionid = 12;
inline bool DecredMsg::has_sessionid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DecredMsg::set_has_sessionid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DecredMsg::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DecredMsg::clear_sessionid() {
  sessionid_ = 0u;
  clear_has_sessionid();
}
inline ::google::protobuf::uint32 DecredMsg::sessionid() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.sessionid)
  return sessionid_;
}
inline void DecredMsg::set_sessionid(::google::protobuf::uint32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.sessionid)
}

// optional uint32 network = 13;
inline bool DecredMsg::has_network() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DecredMsg::set_has_network() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DecredMsg::clear_has_network() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DecredMsg::clear_network() {
  network_ = 0u;
  clear_has_network();
}
inline ::google::protobuf::uint32 DecredMsg::network() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.network)
  return network_;
}
inline void DecredMsg::set_network(::google::protobuf::uint32 value) {
  set_has_network();
  network_ = value;
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.network)
}

// optional uint32 voters = 14;
inline bool DecredMsg::has_voters() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DecredMsg::set_has_voters() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DecredMsg::clear_has_voters() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DecredMsg::clear_voters() {
  voters_ = 0u;
  clear_has_voters();
}
inline ::google::protobuf::uint32 DecredMsg::voters() const {
  // @@protoc_insertion_point(field_get:sharebase.DecredMsg.voters)
  return voters_;
}
inline void DecredMsg::set_voters(::google::protobuf::uint32 value) {
  set_has_voters();
  voters_ = value;
  // @@protoc_insertion_point(field_set:sharebase.DecredMsg.voters)
}

// -------------------------------------------------------------------

// BytomMsg

// required uint32 version = 1;
inline bool BytomMsg::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BytomMsg::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BytomMsg::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BytomMsg::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 BytomMsg::version() const {
  // @@protoc_insertion_point(field_get:sharebase.BytomMsg.version)
  return version_;
}
inline void BytomMsg::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BytomMsg.version)
}

// optional uint64 jobid = 2;
inline bool BytomMsg::has_jobid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BytomMsg::set_has_jobid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BytomMsg::clear_has_jobid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BytomMsg::clear_jobid() {
  jobid_ = GOOGLE_ULONGLONG(0);
  clear_has_jobid();
}
inline ::google::protobuf::uint64 BytomMsg::jobid() const {
  // @@protoc_insertion_point(field_get:sharebase.BytomMsg.jobid)
  return jobid_;
}
inline void BytomMsg::set_jobid(::google::protobuf::uint64 value) {
  set_has_jobid();
  jobid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BytomMsg.jobid)
}

// optional sint64 workerhashid = 3;
inline bool BytomMsg::has_workerhashid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BytomMsg::set_has_workerhashid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BytomMsg::clear_has_workerhashid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BytomMsg::clear_workerhashid() {
  workerhashid_ = GOOGLE_LONGLONG(0);
  clear_has_workerhashid();
}
inline ::google::protobuf::int64 BytomMsg::workerhashid() const {
  // @@protoc_insertion_point(field_get:sharebase.BytomMsg.workerhashid)
  return workerhashid_;
}
inline void BytomMsg::set_workerhashid(::google::protobuf::int64 value) {
  set_has_workerhashid();
  workerhashid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BytomMsg.workerhashid)
}

// optional sint64 timestamp = 4;
inline bool BytomMsg::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BytomMsg::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BytomMsg::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BytomMsg::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 BytomMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:sharebase.BytomMsg.timestamp)
  return timestamp_;
}
inline void BytomMsg::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BytomMsg.timestamp)
}

// optional uint64 sharediff = 5;
inline bool BytomMsg::has_sharediff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BytomMsg::set_has_sharediff() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BytomMsg::clear_has_sharediff() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BytomMsg::clear_sharediff() {
  sharediff_ = GOOGLE_ULONGLONG(0);
  clear_has_sharediff();
}
inline ::google::protobuf::uint64 BytomMsg::sharediff() const {
  // @@protoc_insertion_point(field_get:sharebase.BytomMsg.sharediff)
  return sharediff_;
}
inline void BytomMsg::set_sharediff(::google::protobuf::uint64 value) {
  set_has_sharediff();
  sharediff_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BytomMsg.sharediff)
}

// optional uint64 blkbits = 6;
inline bool BytomMsg::has_blkbits() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BytomMsg::set_has_blkbits() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BytomMsg::clear_has_blkbits() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BytomMsg::clear_blkbits() {
  blkbits_ = GOOGLE_ULONGLONG(0);
  clear_has_blkbits();
}
inline ::google::protobuf::uint64 BytomMsg::blkbits() const {
  // @@protoc_insertion_point(field_get:sharebase.BytomMsg.blkbits)
  return blkbits_;
}
inline void BytomMsg::set_blkbits(::google::protobuf::uint64 value) {
  set_has_blkbits();
  blkbits_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BytomMsg.blkbits)
}

// optional uint64 height = 7;
inline bool BytomMsg::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BytomMsg::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BytomMsg::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BytomMsg::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 BytomMsg::height() const {
  // @@protoc_insertion_point(field_get:sharebase.BytomMsg.height)
  return height_;
}
inline void BytomMsg::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BytomMsg.height)
}

// optional string ip = 8;
inline bool BytomMsg::has_ip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BytomMsg::set_has_ip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BytomMsg::clear_has_ip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BytomMsg::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BytomMsg::ip() const {
  // @@protoc_insertion_point(field_get:sharebase.BytomMsg.ip)
  return *ip_;
}
inline void BytomMsg::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:sharebase.BytomMsg.ip)
}
inline void BytomMsg::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:sharebase.BytomMsg.ip)
}
inline void BytomMsg::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sharebase.BytomMsg.ip)
}
inline ::std::string* BytomMsg::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sharebase.BytomMsg.ip)
  return ip_;
}
inline ::std::string* BytomMsg::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BytomMsg::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sharebase.BytomMsg.ip)
}

// optional bytes combinedHeader = 9;
inline bool BytomMsg::has_combinedheader() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BytomMsg::set_has_combinedheader() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BytomMsg::clear_has_combinedheader() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BytomMsg::clear_combinedheader() {
  if (combinedheader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combinedheader_->clear();
  }
  clear_has_combinedheader();
}
inline const ::std::string& BytomMsg::combinedheader() const {
  // @@protoc_insertion_point(field_get:sharebase.BytomMsg.combinedHeader)
  return *combinedheader_;
}
inline void BytomMsg::set_combinedheader(const ::std::string& value) {
  set_has_combinedheader();
  if (combinedheader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combinedheader_ = new ::std::string;
  }
  combinedheader_->assign(value);
  // @@protoc_insertion_point(field_set:sharebase.BytomMsg.combinedHeader)
}
inline void BytomMsg::set_combinedheader(const char* value) {
  set_has_combinedheader();
  if (combinedheader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combinedheader_ = new ::std::string;
  }
  combinedheader_->assign(value);
  // @@protoc_insertion_point(field_set_char:sharebase.BytomMsg.combinedHeader)
}
inline void BytomMsg::set_combinedheader(const void* value, size_t size) {
  set_has_combinedheader();
  if (combinedheader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combinedheader_ = new ::std::string;
  }
  combinedheader_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sharebase.BytomMsg.combinedHeader)
}
inline ::std::string* BytomMsg::mutable_combinedheader() {
  set_has_combinedheader();
  if (combinedheader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    combinedheader_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:sharebase.BytomMsg.combinedHeader)
  return combinedheader_;
}
inline ::std::string* BytomMsg::release_combinedheader() {
  clear_has_combinedheader();
  if (combinedheader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = combinedheader_;
    combinedheader_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BytomMsg::set_allocated_combinedheader(::std::string* combinedheader) {
  if (combinedheader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete combinedheader_;
  }
  if (combinedheader) {
    set_has_combinedheader();
    combinedheader_ = combinedheader;
  } else {
    clear_has_combinedheader();
    combinedheader_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:sharebase.BytomMsg.combinedHeader)
}

// optional sint32 userid = 10;
inline bool BytomMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BytomMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BytomMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BytomMsg::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 BytomMsg::userid() const {
  // @@protoc_insertion_point(field_get:sharebase.BytomMsg.userid)
  return userid_;
}
inline void BytomMsg::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BytomMsg.userid)
}

// optional sint32 status = 11;
inline bool BytomMsg::has_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BytomMsg::set_has_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BytomMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BytomMsg::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 BytomMsg::status() const {
  // @@protoc_insertion_point(field_get:sharebase.BytomMsg.status)
  return status_;
}
inline void BytomMsg::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:sharebase.BytomMsg.status)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sharebase

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_share_2epro__INCLUDED
