// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: share.pro

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "share.pro.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sharebase {

namespace {

const ::google::protobuf::Descriptor* BitcoinMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitcoinMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* EthMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EthMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SiaMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SiaMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecredMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecredMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BytomMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BytomMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_share_2epro() {
  protobuf_AddDesc_share_2epro();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "share.pro");
  GOOGLE_CHECK(file != NULL);
  BitcoinMsg_descriptor_ = file->message_type(0);
  static const int BitcoinMsg_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, workerhashid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, sharediff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, blkbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, versionmask_),
  };
  BitcoinMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitcoinMsg_descriptor_,
      BitcoinMsg::default_instance_,
      BitcoinMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitcoinMsg));
  EthMsg_descriptor_ = file->message_type(1);
  static const int EthMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, workerhashid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, headerhash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, sharediff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, networkdiff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, sessionid_),
  };
  EthMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EthMsg_descriptor_,
      EthMsg::default_instance_,
      EthMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EthMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EthMsg));
  SiaMsg_descriptor_ = file->message_type(2);
  static const int SiaMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, workerhashid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, sharediff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, blkbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, sessionid_),
  };
  SiaMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SiaMsg_descriptor_,
      SiaMsg::default_instance_,
      SiaMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiaMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SiaMsg));
  DecredMsg_descriptor_ = file->message_type(3);
  static const int DecredMsg_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, workerhashid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, sharediff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, blkbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, voters_),
  };
  DecredMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DecredMsg_descriptor_,
      DecredMsg::default_instance_,
      DecredMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecredMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DecredMsg));
  BytomMsg_descriptor_ = file->message_type(4);
  static const int BytomMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytomMsg, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytomMsg, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytomMsg, workerhashid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytomMsg, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytomMsg, sharediff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytomMsg, blkbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytomMsg, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytomMsg, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytomMsg, combinedheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytomMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytomMsg, status_),
  };
  BytomMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BytomMsg_descriptor_,
      BytomMsg::default_instance_,
      BytomMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytomMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytomMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BytomMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_share_2epro);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitcoinMsg_descriptor_, &BitcoinMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EthMsg_descriptor_, &EthMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SiaMsg_descriptor_, &SiaMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DecredMsg_descriptor_, &DecredMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BytomMsg_descriptor_, &BytomMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_share_2epro() {
  delete BitcoinMsg::default_instance_;
  delete BitcoinMsg_reflection_;
  delete EthMsg::default_instance_;
  delete EthMsg_reflection_;
  delete SiaMsg::default_instance_;
  delete SiaMsg_reflection_;
  delete DecredMsg::default_instance_;
  delete DecredMsg_reflection_;
  delete BytomMsg::default_instance_;
  delete BytomMsg_reflection_;
}

void protobuf_AddDesc_share_2epro() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tshare.pro\022\tsharebase\"\354\001\n\nBitcoinMsg\022\017\n"
    "\007version\030\001 \002(\021\022\024\n\014workerhashid\030\002 \001(\022\022\016\n\006"
    "userid\030\003 \001(\021\022\016\n\006status\030\004 \001(\021\022\021\n\ttimestam"
    "p\030\005 \001(\022\022\n\n\002ip\030\006 \001(\t\022\r\n\005jobid\030\007 \001(\004\022\021\n\tsh"
    "arediff\030\010 \001(\004\022\017\n\007blkbits\030\t \001(\r\022\016\n\006height"
    "\030\n \001(\r\022\r\n\005nonce\030\013 \001(\r\022\021\n\tsessionid\030\014 \001(\r"
    "\022\023\n\013versionMask\030\r \001(\r\"\334\001\n\006EthMsg\022\017\n\007vers"
    "ion\030\001 \002(\021\022\024\n\014workerhashid\030\002 \001(\022\022\016\n\006useri"
    "d\030\003 \001(\021\022\016\n\006status\030\004 \001(\021\022\021\n\ttimestamp\030\005 \001"
    "(\022\022\n\n\002ip\030\006 \001(\t\022\022\n\nheaderhash\030\007 \001(\004\022\021\n\tsh"
    "arediff\030\010 \001(\004\022\023\n\013networkdiff\030\t \001(\004\022\016\n\006he"
    "ight\030\n \001(\r\022\r\n\005nonce\030\013 \001(\004\022\021\n\tsessionid\030\014"
    " \001(\r\"\323\001\n\006SiaMsg\022\017\n\007version\030\001 \002(\r\022\024\n\014work"
    "erhashid\030\002 \001(\022\022\016\n\006userid\030\003 \001(\021\022\016\n\006status"
    "\030\004 \001(\021\022\021\n\ttimestamp\030\005 \001(\022\022\n\n\002ip\030\006 \001(\t\022\r\n"
    "\005jobid\030\007 \001(\004\022\021\n\tsharediff\030\010 \001(\004\022\017\n\007blkbi"
    "ts\030\t \001(\r\022\016\n\006height\030\n \001(\r\022\r\n\005nonce\030\013 \001(\r\022"
    "\021\n\tsessionid\030\014 \001(\r\"\367\001\n\tDecredMsg\022\017\n\007vers"
    "ion\030\001 \002(\r\022\024\n\014workerhashid\030\002 \001(\022\022\016\n\006useri"
    "d\030\003 \001(\021\022\016\n\006status\030\004 \001(\021\022\021\n\ttimestamp\030\005 \001"
    "(\022\022\n\n\002ip\030\006 \001(\t\022\r\n\005jobid\030\007 \001(\004\022\021\n\tsharedi"
    "ff\030\010 \001(\004\022\017\n\007blkbits\030\t \001(\r\022\016\n\006height\030\n \001("
    "\r\022\r\n\005nonce\030\013 \001(\r\022\021\n\tsessionid\030\014 \001(\r\022\017\n\007n"
    "etwork\030\r \001(\r\022\016\n\006voters\030\016 \001(\r\"\313\001\n\010BytomMs"
    "g\022\017\n\007version\030\001 \002(\r\022\r\n\005jobid\030\002 \001(\004\022\024\n\014wor"
    "kerhashid\030\003 \001(\022\022\021\n\ttimestamp\030\004 \001(\022\022\021\n\tsh"
    "arediff\030\005 \001(\004\022\017\n\007blkbits\030\006 \001(\004\022\016\n\006height"
    "\030\007 \001(\004\022\n\n\002ip\030\010 \001(\t\022\026\n\016combinedHeader\030\t \001"
    "(\014\022\016\n\006userid\030\n \001(\021\022\016\n\006status\030\013 \001(\021", 1154);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "share.pro", &protobuf_RegisterTypes);
  BitcoinMsg::default_instance_ = new BitcoinMsg();
  EthMsg::default_instance_ = new EthMsg();
  SiaMsg::default_instance_ = new SiaMsg();
  DecredMsg::default_instance_ = new DecredMsg();
  BytomMsg::default_instance_ = new BytomMsg();
  BitcoinMsg::default_instance_->InitAsDefaultInstance();
  EthMsg::default_instance_->InitAsDefaultInstance();
  SiaMsg::default_instance_->InitAsDefaultInstance();
  DecredMsg::default_instance_->InitAsDefaultInstance();
  BytomMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_share_2epro);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_share_2epro {
  StaticDescriptorInitializer_share_2epro() {
    protobuf_AddDesc_share_2epro();
  }
} static_descriptor_initializer_share_2epro_;

// ===================================================================

#ifndef _MSC_VER
const int BitcoinMsg::kVersionFieldNumber;
const int BitcoinMsg::kWorkerhashidFieldNumber;
const int BitcoinMsg::kUseridFieldNumber;
const int BitcoinMsg::kStatusFieldNumber;
const int BitcoinMsg::kTimestampFieldNumber;
const int BitcoinMsg::kIpFieldNumber;
const int BitcoinMsg::kJobidFieldNumber;
const int BitcoinMsg::kSharediffFieldNumber;
const int BitcoinMsg::kBlkbitsFieldNumber;
const int BitcoinMsg::kHeightFieldNumber;
const int BitcoinMsg::kNonceFieldNumber;
const int BitcoinMsg::kSessionidFieldNumber;
const int BitcoinMsg::kVersionMaskFieldNumber;
#endif  // !_MSC_VER

BitcoinMsg::BitcoinMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sharebase.BitcoinMsg)
}

void BitcoinMsg::InitAsDefaultInstance() {
}

BitcoinMsg::BitcoinMsg(const BitcoinMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sharebase.BitcoinMsg)
}

void BitcoinMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  workerhashid_ = GOOGLE_LONGLONG(0);
  userid_ = 0;
  status_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobid_ = GOOGLE_ULONGLONG(0);
  sharediff_ = GOOGLE_ULONGLONG(0);
  blkbits_ = 0u;
  height_ = 0u;
  nonce_ = 0u;
  sessionid_ = 0u;
  versionmask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitcoinMsg::~BitcoinMsg() {
  // @@protoc_insertion_point(destructor:sharebase.BitcoinMsg)
  SharedDtor();
}

void BitcoinMsg::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void BitcoinMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitcoinMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitcoinMsg_descriptor_;
}

const BitcoinMsg& BitcoinMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_share_2epro();
  return *default_instance_;
}

BitcoinMsg* BitcoinMsg::default_instance_ = NULL;

BitcoinMsg* BitcoinMsg::New() const {
  return new BitcoinMsg;
}

void BitcoinMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BitcoinMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(workerhashid_, timestamp_);
    ZR_(jobid_, sharediff_);
    status_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(height_, versionmask_);
    blkbits_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitcoinMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sharebase.BitcoinMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_workerhashid;
        break;
      }

      // optional sint64 workerhashid = 2;
      case 2: {
        if (tag == 16) {
         parse_workerhashid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &workerhashid_)));
          set_has_workerhashid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional sint32 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional sint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional sint64 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // optional string ip = 6;
      case 6: {
        if (tag == 50) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_jobid;
        break;
      }

      // optional uint64 jobid = 7;
      case 7: {
        if (tag == 56) {
         parse_jobid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jobid_)));
          set_has_jobid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sharediff;
        break;
      }

      // optional uint64 sharediff = 8;
      case 8: {
        if (tag == 64) {
         parse_sharediff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sharediff_)));
          set_has_sharediff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_blkbits;
        break;
      }

      // optional uint32 blkbits = 9;
      case 9: {
        if (tag == 72) {
         parse_blkbits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blkbits_)));
          set_has_blkbits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_height;
        break;
      }

      // optional uint32 height = 10;
      case 10: {
        if (tag == 80) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_nonce;
        break;
      }

      // optional uint32 nonce = 11;
      case 11: {
        if (tag == 88) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_sessionid;
        break;
      }

      // optional uint32 sessionid = 12;
      case 12: {
        if (tag == 96) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_versionMask;
        break;
      }

      // optional uint32 versionMask = 13;
      case 13: {
        if (tag == 104) {
         parse_versionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &versionmask_)));
          set_has_versionmask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sharebase.BitcoinMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sharebase.BitcoinMsg)
  return false;
#undef DO_
}

void BitcoinMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sharebase.BitcoinMsg)
  // required sint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->version(), output);
  }

  // optional sint64 workerhashid = 2;
  if (has_workerhashid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->workerhashid(), output);
  }

  // optional sint32 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->userid(), output);
  }

  // optional sint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->status(), output);
  }

  // optional sint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->timestamp(), output);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ip(), output);
  }

  // optional uint64 jobid = 7;
  if (has_jobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->jobid(), output);
  }

  // optional uint64 sharediff = 8;
  if (has_sharediff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->sharediff(), output);
  }

  // optional uint32 blkbits = 9;
  if (has_blkbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->blkbits(), output);
  }

  // optional uint32 height = 10;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->height(), output);
  }

  // optional uint32 nonce = 11;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->nonce(), output);
  }

  // optional uint32 sessionid = 12;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sessionid(), output);
  }

  // optional uint32 versionMask = 13;
  if (has_versionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->versionmask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sharebase.BitcoinMsg)
}

::google::protobuf::uint8* BitcoinMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sharebase.BitcoinMsg)
  // required sint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->version(), target);
  }

  // optional sint64 workerhashid = 2;
  if (has_workerhashid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->workerhashid(), target);
  }

  // optional sint32 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->userid(), target);
  }

  // optional sint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->status(), target);
  }

  // optional sint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->timestamp(), target);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  // optional uint64 jobid = 7;
  if (has_jobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->jobid(), target);
  }

  // optional uint64 sharediff = 8;
  if (has_sharediff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->sharediff(), target);
  }

  // optional uint32 blkbits = 9;
  if (has_blkbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->blkbits(), target);
  }

  // optional uint32 height = 10;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->height(), target);
  }

  // optional uint32 nonce = 11;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->nonce(), target);
  }

  // optional uint32 sessionid = 12;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sessionid(), target);
  }

  // optional uint32 versionMask = 13;
  if (has_versionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->versionmask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sharebase.BitcoinMsg)
  return target;
}

int BitcoinMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->version());
    }

    // optional sint64 workerhashid = 2;
    if (has_workerhashid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->workerhashid());
    }

    // optional sint32 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->userid());
    }

    // optional sint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional sint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->timestamp());
    }

    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint64 jobid = 7;
    if (has_jobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jobid());
    }

    // optional uint64 sharediff = 8;
    if (has_sharediff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sharediff());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 blkbits = 9;
    if (has_blkbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blkbits());
    }

    // optional uint32 height = 10;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 nonce = 11;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nonce());
    }

    // optional uint32 sessionid = 12;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

    // optional uint32 versionMask = 13;
    if (has_versionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->versionmask());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitcoinMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitcoinMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitcoinMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitcoinMsg::MergeFrom(const BitcoinMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_workerhashid()) {
      set_workerhashid(from.workerhashid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_jobid()) {
      set_jobid(from.jobid());
    }
    if (from.has_sharediff()) {
      set_sharediff(from.sharediff());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blkbits()) {
      set_blkbits(from.blkbits());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_versionmask()) {
      set_versionmask(from.versionmask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitcoinMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitcoinMsg::CopyFrom(const BitcoinMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BitcoinMsg::Swap(BitcoinMsg* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(workerhashid_, other->workerhashid_);
    std::swap(userid_, other->userid_);
    std::swap(status_, other->status_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(ip_, other->ip_);
    std::swap(jobid_, other->jobid_);
    std::swap(sharediff_, other->sharediff_);
    std::swap(blkbits_, other->blkbits_);
    std::swap(height_, other->height_);
    std::swap(nonce_, other->nonce_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(versionmask_, other->versionmask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitcoinMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitcoinMsg_descriptor_;
  metadata.reflection = BitcoinMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EthMsg::kVersionFieldNumber;
const int EthMsg::kWorkerhashidFieldNumber;
const int EthMsg::kUseridFieldNumber;
const int EthMsg::kStatusFieldNumber;
const int EthMsg::kTimestampFieldNumber;
const int EthMsg::kIpFieldNumber;
const int EthMsg::kHeaderhashFieldNumber;
const int EthMsg::kSharediffFieldNumber;
const int EthMsg::kNetworkdiffFieldNumber;
const int EthMsg::kHeightFieldNumber;
const int EthMsg::kNonceFieldNumber;
const int EthMsg::kSessionidFieldNumber;
#endif  // !_MSC_VER

EthMsg::EthMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sharebase.EthMsg)
}

void EthMsg::InitAsDefaultInstance() {
}

EthMsg::EthMsg(const EthMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sharebase.EthMsg)
}

void EthMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0;
  workerhashid_ = GOOGLE_LONGLONG(0);
  userid_ = 0;
  status_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headerhash_ = GOOGLE_ULONGLONG(0);
  sharediff_ = GOOGLE_ULONGLONG(0);
  networkdiff_ = GOOGLE_ULONGLONG(0);
  height_ = 0u;
  nonce_ = GOOGLE_ULONGLONG(0);
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EthMsg::~EthMsg() {
  // @@protoc_insertion_point(destructor:sharebase.EthMsg)
  SharedDtor();
}

void EthMsg::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void EthMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EthMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EthMsg_descriptor_;
}

const EthMsg& EthMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_share_2epro();
  return *default_instance_;
}

EthMsg* EthMsg::default_instance_ = NULL;

EthMsg* EthMsg::New() const {
  return new EthMsg;
}

void EthMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EthMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(workerhashid_, timestamp_);
    ZR_(headerhash_, status_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    sharediff_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(networkdiff_, sessionid_);
    height_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EthMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sharebase.EthMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_workerhashid;
        break;
      }

      // optional sint64 workerhashid = 2;
      case 2: {
        if (tag == 16) {
         parse_workerhashid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &workerhashid_)));
          set_has_workerhashid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional sint32 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional sint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional sint64 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // optional string ip = 6;
      case 6: {
        if (tag == 50) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_headerhash;
        break;
      }

      // optional uint64 headerhash = 7;
      case 7: {
        if (tag == 56) {
         parse_headerhash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &headerhash_)));
          set_has_headerhash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sharediff;
        break;
      }

      // optional uint64 sharediff = 8;
      case 8: {
        if (tag == 64) {
         parse_sharediff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sharediff_)));
          set_has_sharediff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_networkdiff;
        break;
      }

      // optional uint64 networkdiff = 9;
      case 9: {
        if (tag == 72) {
         parse_networkdiff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &networkdiff_)));
          set_has_networkdiff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_height;
        break;
      }

      // optional uint32 height = 10;
      case 10: {
        if (tag == 80) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_nonce;
        break;
      }

      // optional uint64 nonce = 11;
      case 11: {
        if (tag == 88) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_sessionid;
        break;
      }

      // optional uint32 sessionid = 12;
      case 12: {
        if (tag == 96) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sharebase.EthMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sharebase.EthMsg)
  return false;
#undef DO_
}

void EthMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sharebase.EthMsg)
  // required sint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->version(), output);
  }

  // optional sint64 workerhashid = 2;
  if (has_workerhashid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->workerhashid(), output);
  }

  // optional sint32 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->userid(), output);
  }

  // optional sint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->status(), output);
  }

  // optional sint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->timestamp(), output);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ip(), output);
  }

  // optional uint64 headerhash = 7;
  if (has_headerhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->headerhash(), output);
  }

  // optional uint64 sharediff = 8;
  if (has_sharediff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->sharediff(), output);
  }

  // optional uint64 networkdiff = 9;
  if (has_networkdiff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->networkdiff(), output);
  }

  // optional uint32 height = 10;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->height(), output);
  }

  // optional uint64 nonce = 11;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->nonce(), output);
  }

  // optional uint32 sessionid = 12;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sharebase.EthMsg)
}

::google::protobuf::uint8* EthMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sharebase.EthMsg)
  // required sint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->version(), target);
  }

  // optional sint64 workerhashid = 2;
  if (has_workerhashid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->workerhashid(), target);
  }

  // optional sint32 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->userid(), target);
  }

  // optional sint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->status(), target);
  }

  // optional sint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->timestamp(), target);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  // optional uint64 headerhash = 7;
  if (has_headerhash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->headerhash(), target);
  }

  // optional uint64 sharediff = 8;
  if (has_sharediff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->sharediff(), target);
  }

  // optional uint64 networkdiff = 9;
  if (has_networkdiff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->networkdiff(), target);
  }

  // optional uint32 height = 10;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->height(), target);
  }

  // optional uint64 nonce = 11;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->nonce(), target);
  }

  // optional uint32 sessionid = 12;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sharebase.EthMsg)
  return target;
}

int EthMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->version());
    }

    // optional sint64 workerhashid = 2;
    if (has_workerhashid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->workerhashid());
    }

    // optional sint32 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->userid());
    }

    // optional sint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional sint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->timestamp());
    }

    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint64 headerhash = 7;
    if (has_headerhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->headerhash());
    }

    // optional uint64 sharediff = 8;
    if (has_sharediff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sharediff());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 networkdiff = 9;
    if (has_networkdiff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->networkdiff());
    }

    // optional uint32 height = 10;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint64 nonce = 11;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->nonce());
    }

    // optional uint32 sessionid = 12;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EthMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EthMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EthMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EthMsg::MergeFrom(const EthMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_workerhashid()) {
      set_workerhashid(from.workerhashid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_headerhash()) {
      set_headerhash(from.headerhash());
    }
    if (from.has_sharediff()) {
      set_sharediff(from.sharediff());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_networkdiff()) {
      set_networkdiff(from.networkdiff());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EthMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EthMsg::CopyFrom(const EthMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EthMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EthMsg::Swap(EthMsg* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(workerhashid_, other->workerhashid_);
    std::swap(userid_, other->userid_);
    std::swap(status_, other->status_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(ip_, other->ip_);
    std::swap(headerhash_, other->headerhash_);
    std::swap(sharediff_, other->sharediff_);
    std::swap(networkdiff_, other->networkdiff_);
    std::swap(height_, other->height_);
    std::swap(nonce_, other->nonce_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EthMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EthMsg_descriptor_;
  metadata.reflection = EthMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SiaMsg::kVersionFieldNumber;
const int SiaMsg::kWorkerhashidFieldNumber;
const int SiaMsg::kUseridFieldNumber;
const int SiaMsg::kStatusFieldNumber;
const int SiaMsg::kTimestampFieldNumber;
const int SiaMsg::kIpFieldNumber;
const int SiaMsg::kJobidFieldNumber;
const int SiaMsg::kSharediffFieldNumber;
const int SiaMsg::kBlkbitsFieldNumber;
const int SiaMsg::kHeightFieldNumber;
const int SiaMsg::kNonceFieldNumber;
const int SiaMsg::kSessionidFieldNumber;
#endif  // !_MSC_VER

SiaMsg::SiaMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sharebase.SiaMsg)
}

void SiaMsg::InitAsDefaultInstance() {
}

SiaMsg::SiaMsg(const SiaMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sharebase.SiaMsg)
}

void SiaMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  workerhashid_ = GOOGLE_LONGLONG(0);
  userid_ = 0;
  status_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobid_ = GOOGLE_ULONGLONG(0);
  sharediff_ = GOOGLE_ULONGLONG(0);
  blkbits_ = 0u;
  height_ = 0u;
  nonce_ = 0u;
  sessionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SiaMsg::~SiaMsg() {
  // @@protoc_insertion_point(destructor:sharebase.SiaMsg)
  SharedDtor();
}

void SiaMsg::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void SiaMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiaMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SiaMsg_descriptor_;
}

const SiaMsg& SiaMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_share_2epro();
  return *default_instance_;
}

SiaMsg* SiaMsg::default_instance_ = NULL;

SiaMsg* SiaMsg::New() const {
  return new SiaMsg;
}

void SiaMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SiaMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(workerhashid_, timestamp_);
    ZR_(jobid_, sharediff_);
    status_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(height_, sessionid_);
    blkbits_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SiaMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sharebase.SiaMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_workerhashid;
        break;
      }

      // optional sint64 workerhashid = 2;
      case 2: {
        if (tag == 16) {
         parse_workerhashid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &workerhashid_)));
          set_has_workerhashid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional sint32 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional sint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional sint64 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // optional string ip = 6;
      case 6: {
        if (tag == 50) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_jobid;
        break;
      }

      // optional uint64 jobid = 7;
      case 7: {
        if (tag == 56) {
         parse_jobid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jobid_)));
          set_has_jobid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sharediff;
        break;
      }

      // optional uint64 sharediff = 8;
      case 8: {
        if (tag == 64) {
         parse_sharediff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sharediff_)));
          set_has_sharediff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_blkbits;
        break;
      }

      // optional uint32 blkbits = 9;
      case 9: {
        if (tag == 72) {
         parse_blkbits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blkbits_)));
          set_has_blkbits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_height;
        break;
      }

      // optional uint32 height = 10;
      case 10: {
        if (tag == 80) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_nonce;
        break;
      }

      // optional uint32 nonce = 11;
      case 11: {
        if (tag == 88) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_sessionid;
        break;
      }

      // optional uint32 sessionid = 12;
      case 12: {
        if (tag == 96) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sharebase.SiaMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sharebase.SiaMsg)
  return false;
#undef DO_
}

void SiaMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sharebase.SiaMsg)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional sint64 workerhashid = 2;
  if (has_workerhashid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->workerhashid(), output);
  }

  // optional sint32 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->userid(), output);
  }

  // optional sint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->status(), output);
  }

  // optional sint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->timestamp(), output);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ip(), output);
  }

  // optional uint64 jobid = 7;
  if (has_jobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->jobid(), output);
  }

  // optional uint64 sharediff = 8;
  if (has_sharediff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->sharediff(), output);
  }

  // optional uint32 blkbits = 9;
  if (has_blkbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->blkbits(), output);
  }

  // optional uint32 height = 10;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->height(), output);
  }

  // optional uint32 nonce = 11;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->nonce(), output);
  }

  // optional uint32 sessionid = 12;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sharebase.SiaMsg)
}

::google::protobuf::uint8* SiaMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sharebase.SiaMsg)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional sint64 workerhashid = 2;
  if (has_workerhashid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->workerhashid(), target);
  }

  // optional sint32 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->userid(), target);
  }

  // optional sint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->status(), target);
  }

  // optional sint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->timestamp(), target);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  // optional uint64 jobid = 7;
  if (has_jobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->jobid(), target);
  }

  // optional uint64 sharediff = 8;
  if (has_sharediff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->sharediff(), target);
  }

  // optional uint32 blkbits = 9;
  if (has_blkbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->blkbits(), target);
  }

  // optional uint32 height = 10;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->height(), target);
  }

  // optional uint32 nonce = 11;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->nonce(), target);
  }

  // optional uint32 sessionid = 12;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sharebase.SiaMsg)
  return target;
}

int SiaMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional sint64 workerhashid = 2;
    if (has_workerhashid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->workerhashid());
    }

    // optional sint32 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->userid());
    }

    // optional sint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional sint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->timestamp());
    }

    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint64 jobid = 7;
    if (has_jobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jobid());
    }

    // optional uint64 sharediff = 8;
    if (has_sharediff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sharediff());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 blkbits = 9;
    if (has_blkbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blkbits());
    }

    // optional uint32 height = 10;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 nonce = 11;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nonce());
    }

    // optional uint32 sessionid = 12;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiaMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SiaMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SiaMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SiaMsg::MergeFrom(const SiaMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_workerhashid()) {
      set_workerhashid(from.workerhashid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_jobid()) {
      set_jobid(from.jobid());
    }
    if (from.has_sharediff()) {
      set_sharediff(from.sharediff());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blkbits()) {
      set_blkbits(from.blkbits());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SiaMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiaMsg::CopyFrom(const SiaMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiaMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SiaMsg::Swap(SiaMsg* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(workerhashid_, other->workerhashid_);
    std::swap(userid_, other->userid_);
    std::swap(status_, other->status_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(ip_, other->ip_);
    std::swap(jobid_, other->jobid_);
    std::swap(sharediff_, other->sharediff_);
    std::swap(blkbits_, other->blkbits_);
    std::swap(height_, other->height_);
    std::swap(nonce_, other->nonce_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SiaMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SiaMsg_descriptor_;
  metadata.reflection = SiaMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DecredMsg::kVersionFieldNumber;
const int DecredMsg::kWorkerhashidFieldNumber;
const int DecredMsg::kUseridFieldNumber;
const int DecredMsg::kStatusFieldNumber;
const int DecredMsg::kTimestampFieldNumber;
const int DecredMsg::kIpFieldNumber;
const int DecredMsg::kJobidFieldNumber;
const int DecredMsg::kSharediffFieldNumber;
const int DecredMsg::kBlkbitsFieldNumber;
const int DecredMsg::kHeightFieldNumber;
const int DecredMsg::kNonceFieldNumber;
const int DecredMsg::kSessionidFieldNumber;
const int DecredMsg::kNetworkFieldNumber;
const int DecredMsg::kVotersFieldNumber;
#endif  // !_MSC_VER

DecredMsg::DecredMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sharebase.DecredMsg)
}

void DecredMsg::InitAsDefaultInstance() {
}

DecredMsg::DecredMsg(const DecredMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sharebase.DecredMsg)
}

void DecredMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  workerhashid_ = GOOGLE_LONGLONG(0);
  userid_ = 0;
  status_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobid_ = GOOGLE_ULONGLONG(0);
  sharediff_ = GOOGLE_ULONGLONG(0);
  blkbits_ = 0u;
  height_ = 0u;
  nonce_ = 0u;
  sessionid_ = 0u;
  network_ = 0u;
  voters_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecredMsg::~DecredMsg() {
  // @@protoc_insertion_point(destructor:sharebase.DecredMsg)
  SharedDtor();
}

void DecredMsg::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void DecredMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecredMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecredMsg_descriptor_;
}

const DecredMsg& DecredMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_share_2epro();
  return *default_instance_;
}

DecredMsg* DecredMsg::default_instance_ = NULL;

DecredMsg* DecredMsg::New() const {
  return new DecredMsg;
}

void DecredMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DecredMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(workerhashid_, timestamp_);
    ZR_(jobid_, sharediff_);
    status_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(height_, voters_);
    blkbits_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DecredMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sharebase.DecredMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_workerhashid;
        break;
      }

      // optional sint64 workerhashid = 2;
      case 2: {
        if (tag == 16) {
         parse_workerhashid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &workerhashid_)));
          set_has_workerhashid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional sint32 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional sint32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional sint64 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // optional string ip = 6;
      case 6: {
        if (tag == 50) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_jobid;
        break;
      }

      // optional uint64 jobid = 7;
      case 7: {
        if (tag == 56) {
         parse_jobid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jobid_)));
          set_has_jobid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_sharediff;
        break;
      }

      // optional uint64 sharediff = 8;
      case 8: {
        if (tag == 64) {
         parse_sharediff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sharediff_)));
          set_has_sharediff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_blkbits;
        break;
      }

      // optional uint32 blkbits = 9;
      case 9: {
        if (tag == 72) {
         parse_blkbits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blkbits_)));
          set_has_blkbits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_height;
        break;
      }

      // optional uint32 height = 10;
      case 10: {
        if (tag == 80) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_nonce;
        break;
      }

      // optional uint32 nonce = 11;
      case 11: {
        if (tag == 88) {
         parse_nonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nonce_)));
          set_has_nonce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_sessionid;
        break;
      }

      // optional uint32 sessionid = 12;
      case 12: {
        if (tag == 96) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_network;
        break;
      }

      // optional uint32 network = 13;
      case 13: {
        if (tag == 104) {
         parse_network:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_)));
          set_has_network();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_voters;
        break;
      }

      // optional uint32 voters = 14;
      case 14: {
        if (tag == 112) {
         parse_voters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voters_)));
          set_has_voters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sharebase.DecredMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sharebase.DecredMsg)
  return false;
#undef DO_
}

void DecredMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sharebase.DecredMsg)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional sint64 workerhashid = 2;
  if (has_workerhashid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->workerhashid(), output);
  }

  // optional sint32 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->userid(), output);
  }

  // optional sint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->status(), output);
  }

  // optional sint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->timestamp(), output);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->ip(), output);
  }

  // optional uint64 jobid = 7;
  if (has_jobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->jobid(), output);
  }

  // optional uint64 sharediff = 8;
  if (has_sharediff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->sharediff(), output);
  }

  // optional uint32 blkbits = 9;
  if (has_blkbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->blkbits(), output);
  }

  // optional uint32 height = 10;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->height(), output);
  }

  // optional uint32 nonce = 11;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->nonce(), output);
  }

  // optional uint32 sessionid = 12;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sessionid(), output);
  }

  // optional uint32 network = 13;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->network(), output);
  }

  // optional uint32 voters = 14;
  if (has_voters()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->voters(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sharebase.DecredMsg)
}

::google::protobuf::uint8* DecredMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sharebase.DecredMsg)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional sint64 workerhashid = 2;
  if (has_workerhashid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->workerhashid(), target);
  }

  // optional sint32 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->userid(), target);
  }

  // optional sint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->status(), target);
  }

  // optional sint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->timestamp(), target);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  // optional uint64 jobid = 7;
  if (has_jobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->jobid(), target);
  }

  // optional uint64 sharediff = 8;
  if (has_sharediff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->sharediff(), target);
  }

  // optional uint32 blkbits = 9;
  if (has_blkbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->blkbits(), target);
  }

  // optional uint32 height = 10;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->height(), target);
  }

  // optional uint32 nonce = 11;
  if (has_nonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->nonce(), target);
  }

  // optional uint32 sessionid = 12;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sessionid(), target);
  }

  // optional uint32 network = 13;
  if (has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->network(), target);
  }

  // optional uint32 voters = 14;
  if (has_voters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->voters(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sharebase.DecredMsg)
  return target;
}

int DecredMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional sint64 workerhashid = 2;
    if (has_workerhashid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->workerhashid());
    }

    // optional sint32 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->userid());
    }

    // optional sint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

    // optional sint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->timestamp());
    }

    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint64 jobid = 7;
    if (has_jobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jobid());
    }

    // optional uint64 sharediff = 8;
    if (has_sharediff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sharediff());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 blkbits = 9;
    if (has_blkbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blkbits());
    }

    // optional uint32 height = 10;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 nonce = 11;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nonce());
    }

    // optional uint32 sessionid = 12;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

    // optional uint32 network = 13;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network());
    }

    // optional uint32 voters = 14;
    if (has_voters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voters());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecredMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DecredMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DecredMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DecredMsg::MergeFrom(const DecredMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_workerhashid()) {
      set_workerhashid(from.workerhashid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_jobid()) {
      set_jobid(from.jobid());
    }
    if (from.has_sharediff()) {
      set_sharediff(from.sharediff());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blkbits()) {
      set_blkbits(from.blkbits());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_voters()) {
      set_voters(from.voters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DecredMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecredMsg::CopyFrom(const DecredMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecredMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DecredMsg::Swap(DecredMsg* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(workerhashid_, other->workerhashid_);
    std::swap(userid_, other->userid_);
    std::swap(status_, other->status_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(ip_, other->ip_);
    std::swap(jobid_, other->jobid_);
    std::swap(sharediff_, other->sharediff_);
    std::swap(blkbits_, other->blkbits_);
    std::swap(height_, other->height_);
    std::swap(nonce_, other->nonce_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(network_, other->network_);
    std::swap(voters_, other->voters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DecredMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecredMsg_descriptor_;
  metadata.reflection = DecredMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BytomMsg::kVersionFieldNumber;
const int BytomMsg::kJobidFieldNumber;
const int BytomMsg::kWorkerhashidFieldNumber;
const int BytomMsg::kTimestampFieldNumber;
const int BytomMsg::kSharediffFieldNumber;
const int BytomMsg::kBlkbitsFieldNumber;
const int BytomMsg::kHeightFieldNumber;
const int BytomMsg::kIpFieldNumber;
const int BytomMsg::kCombinedHeaderFieldNumber;
const int BytomMsg::kUseridFieldNumber;
const int BytomMsg::kStatusFieldNumber;
#endif  // !_MSC_VER

BytomMsg::BytomMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sharebase.BytomMsg)
}

void BytomMsg::InitAsDefaultInstance() {
}

BytomMsg::BytomMsg(const BytomMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:sharebase.BytomMsg)
}

void BytomMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = 0u;
  jobid_ = GOOGLE_ULONGLONG(0);
  workerhashid_ = GOOGLE_LONGLONG(0);
  timestamp_ = GOOGLE_LONGLONG(0);
  sharediff_ = GOOGLE_ULONGLONG(0);
  blkbits_ = GOOGLE_ULONGLONG(0);
  height_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  combinedheader_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BytomMsg::~BytomMsg() {
  // @@protoc_insertion_point(destructor:sharebase.BytomMsg)
  SharedDtor();
}

void BytomMsg::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (combinedheader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete combinedheader_;
  }
  if (this != default_instance_) {
  }
}

void BytomMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BytomMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BytomMsg_descriptor_;
}

const BytomMsg& BytomMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_share_2epro();
  return *default_instance_;
}

BytomMsg* BytomMsg::default_instance_ = NULL;

BytomMsg* BytomMsg::New() const {
  return new BytomMsg;
}

void BytomMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BytomMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(jobid_, version_);
    ZR_(blkbits_, height_);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_combinedheader()) {
      if (combinedheader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        combinedheader_->clear();
      }
    }
    userid_ = 0;
    status_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BytomMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sharebase.BytomMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_jobid;
        break;
      }

      // optional uint64 jobid = 2;
      case 2: {
        if (tag == 16) {
         parse_jobid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jobid_)));
          set_has_jobid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_workerhashid;
        break;
      }

      // optional sint64 workerhashid = 3;
      case 3: {
        if (tag == 24) {
         parse_workerhashid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &workerhashid_)));
          set_has_workerhashid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional sint64 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sharediff;
        break;
      }

      // optional uint64 sharediff = 5;
      case 5: {
        if (tag == 40) {
         parse_sharediff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sharediff_)));
          set_has_sharediff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_blkbits;
        break;
      }

      // optional uint64 blkbits = 6;
      case 6: {
        if (tag == 48) {
         parse_blkbits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blkbits_)));
          set_has_blkbits();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_height;
        break;
      }

      // optional uint64 height = 7;
      case 7: {
        if (tag == 56) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ip;
        break;
      }

      // optional string ip = 8;
      case 8: {
        if (tag == 66) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_combinedHeader;
        break;
      }

      // optional bytes combinedHeader = 9;
      case 9: {
        if (tag == 74) {
         parse_combinedHeader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_combinedheader()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_userid;
        break;
      }

      // optional sint32 userid = 10;
      case 10: {
        if (tag == 80) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_status;
        break;
      }

      // optional sint32 status = 11;
      case 11: {
        if (tag == 88) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sharebase.BytomMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sharebase.BytomMsg)
  return false;
#undef DO_
}

void BytomMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sharebase.BytomMsg)
  // required uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint64 jobid = 2;
  if (has_jobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->jobid(), output);
  }

  // optional sint64 workerhashid = 3;
  if (has_workerhashid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->workerhashid(), output);
  }

  // optional sint64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->timestamp(), output);
  }

  // optional uint64 sharediff = 5;
  if (has_sharediff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sharediff(), output);
  }

  // optional uint64 blkbits = 6;
  if (has_blkbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->blkbits(), output);
  }

  // optional uint64 height = 7;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->height(), output);
  }

  // optional string ip = 8;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ip(), output);
  }

  // optional bytes combinedHeader = 9;
  if (has_combinedheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->combinedheader(), output);
  }

  // optional sint32 userid = 10;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->userid(), output);
  }

  // optional sint32 status = 11;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(11, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sharebase.BytomMsg)
}

::google::protobuf::uint8* BytomMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sharebase.BytomMsg)
  // required uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint64 jobid = 2;
  if (has_jobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->jobid(), target);
  }

  // optional sint64 workerhashid = 3;
  if (has_workerhashid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->workerhashid(), target);
  }

  // optional sint64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->timestamp(), target);
  }

  // optional uint64 sharediff = 5;
  if (has_sharediff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sharediff(), target);
  }

  // optional uint64 blkbits = 6;
  if (has_blkbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->blkbits(), target);
  }

  // optional uint64 height = 7;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->height(), target);
  }

  // optional string ip = 8;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ip(), target);
  }

  // optional bytes combinedHeader = 9;
  if (has_combinedheader()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->combinedheader(), target);
  }

  // optional sint32 userid = 10;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->userid(), target);
  }

  // optional sint32 status = 11;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(11, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sharebase.BytomMsg)
  return target;
}

int BytomMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint64 jobid = 2;
    if (has_jobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jobid());
    }

    // optional sint64 workerhashid = 3;
    if (has_workerhashid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->workerhashid());
    }

    // optional sint64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->timestamp());
    }

    // optional uint64 sharediff = 5;
    if (has_sharediff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sharediff());
    }

    // optional uint64 blkbits = 6;
    if (has_blkbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blkbits());
    }

    // optional uint64 height = 7;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->height());
    }

    // optional string ip = 8;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes combinedHeader = 9;
    if (has_combinedheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->combinedheader());
    }

    // optional sint32 userid = 10;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->userid());
    }

    // optional sint32 status = 11;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BytomMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BytomMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BytomMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BytomMsg::MergeFrom(const BytomMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_jobid()) {
      set_jobid(from.jobid());
    }
    if (from.has_workerhashid()) {
      set_workerhashid(from.workerhashid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sharediff()) {
      set_sharediff(from.sharediff());
    }
    if (from.has_blkbits()) {
      set_blkbits(from.blkbits());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_combinedheader()) {
      set_combinedheader(from.combinedheader());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BytomMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BytomMsg::CopyFrom(const BytomMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BytomMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BytomMsg::Swap(BytomMsg* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(jobid_, other->jobid_);
    std::swap(workerhashid_, other->workerhashid_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(sharediff_, other->sharediff_);
    std::swap(blkbits_, other->blkbits_);
    std::swap(height_, other->height_);
    std::swap(ip_, other->ip_);
    std::swap(combinedheader_, other->combinedheader_);
    std::swap(userid_, other->userid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BytomMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BytomMsg_descriptor_;
  metadata.reflection = BytomMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sharebase

// @@protoc_insertion_point(global_scope)
